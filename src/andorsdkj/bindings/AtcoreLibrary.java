package andorsdkj.bindings;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>atcore</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library(value = "atcore.dll", dependencies = {"atcore.dll", "atblkbx.dll", "atcl_bitflow.dll", "atdevapogee.dll", "atdevregcam.dll", "atdevsimcam.dll", "atspooler.dll", "atusb_libusb.dll", "atusb_libusb10.dll", "atutility.dll", "clallserial.dll", "atmcd64d.dll"}) 
@Runtime(CRuntime.class) 
public class AtcoreLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final long AT_INFINITE = (long)0xFFFFFFFFL;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_CALLBACK_SUCCESS = (int)0;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_TRUE = (int)1;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_FALSE = (int)0;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_SUCCESS = (int)0;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NOTINITIALISED = (int)1;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NOTIMPLEMENTED = (int)2;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_READONLY = (int)3;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NOTREADABLE = (int)4;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NOTWRITABLE = (int)5;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_OUTOFRANGE = (int)6;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_INDEXNOTAVAILABLE = (int)7;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_INDEXNOTIMPLEMENTED = (int)8;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_EXCEEDEDMAXSTRINGLENGTH = (int)9;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_CONNECTION = (int)10;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NODATA = (int)11;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_INVALIDHANDLE = (int)12;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_TIMEDOUT = (int)13;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_BUFFERFULL = (int)14;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_INVALIDSIZE = (int)15;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_INVALIDALIGNMENT = (int)16;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_COMM = (int)17;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_STRINGNOTAVAILABLE = (int)18;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_STRINGNOTIMPLEMENTED = (int)19;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_FEATURE = (int)20;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_HANDLE = (int)21;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_IMPLEMENTED_VAR = (int)22;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_READABLE_VAR = (int)23;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_READONLY_VAR = (int)24;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_WRITABLE_VAR = (int)25;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_MINVALUE = (int)26;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_MAXVALUE = (int)27;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_VALUE = (int)28;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_STRING = (int)29;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_COUNT_VAR = (int)30;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_ISAVAILABLE_VAR = (int)31;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_MAXSTRINGLENGTH = (int)32;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_EVCALLBACK = (int)33;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_QUEUE_PTR = (int)34;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_WAIT_PTR = (int)35;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NULL_PTRSIZE = (int)36;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_NOMEMORY = (int)37;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_DEVICEINUSE = (int)38;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_DEVICENOTFOUND = (int)39;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_ERR_HARDWARE_OVERFLOW = (int)100;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_HANDLE_UNINITIALISED = (int)-1;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static final int AT_HANDLE_SYSTEM = (int)1;
	/** <i>native declaration : lib\andorsdkj\atcore.h</i> */
	public static abstract class FeatureCallback extends Callback<FeatureCallback > {
		@Convention(Convention.Style.StdCall) 
		public int apply(int Hndl, Pointer<Character > Feature, Pointer<? > Context) {
			return apply(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Context));
		}
		@Convention(Convention.Style.StdCall) 
		public int apply(int Hndl, @Ptr long Feature, @Ptr long Context) {
			return apply(Hndl, (Pointer)Pointer.pointerToAddress(Feature, Character.class), Pointer.pointerToAddress(Context));
		}
	};
	/**
	 * Original signature : <code>int AT_InitialiseLibrary()</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:64</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int AT_InitialiseLibrary();
	/**
	 * Original signature : <code>int AT_FinaliseLibrary()</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:65</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int AT_FinaliseLibrary();
	/**
	 * Original signature : <code>int AT_Open(int, AT_H*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:67</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_Open(int CameraIndex, Pointer<Integer > Hndl) {
		return AT_Open(CameraIndex, Pointer.getPeer(Hndl));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_Open(int CameraIndex, @Ptr long Hndl);
	/**
	 * Original signature : <code>int AT_Close(AT_H)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:68</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int AT_Close(int Hndl);
	/**
	 * Original signature : <code>int AT_RegisterFeatureCallback(AT_H, const AT_WC*, FeatureCallback, void*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:71</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_RegisterFeatureCallback(int Hndl, Pointer<Character > Feature, Pointer<AtcoreLibrary.FeatureCallback > EvCallback, Pointer<? > Context) {
		return AT_RegisterFeatureCallback(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(EvCallback), Pointer.getPeer(Context));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_RegisterFeatureCallback(int Hndl, @Ptr long Feature, @Ptr long EvCallback, @Ptr long Context);
	/**
	 * Original signature : <code>int AT_UnregisterFeatureCallback(AT_H, const AT_WC*, FeatureCallback, void*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:72</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_UnregisterFeatureCallback(int Hndl, Pointer<Character > Feature, Pointer<AtcoreLibrary.FeatureCallback > EvCallback, Pointer<? > Context) {
		return AT_UnregisterFeatureCallback(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(EvCallback), Pointer.getPeer(Context));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_UnregisterFeatureCallback(int Hndl, @Ptr long Feature, @Ptr long EvCallback, @Ptr long Context);
	/**
	 * Original signature : <code>int AT_IsImplemented(AT_H, const AT_WC*, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:74</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsImplemented(int Hndl, Pointer<Character > Feature, Pointer<Integer > Implemented) {
		return AT_IsImplemented(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Implemented));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsImplemented(int Hndl, @Ptr long Feature, @Ptr long Implemented);
	/**
	 * Original signature : <code>int AT_IsReadable(AT_H, const AT_WC*, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:75</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsReadable(int Hndl, Pointer<Character > Feature, Pointer<Integer > Readable) {
		return AT_IsReadable(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Readable));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsReadable(int Hndl, @Ptr long Feature, @Ptr long Readable);
	/**
	 * Original signature : <code>int AT_IsWritable(AT_H, const AT_WC*, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:76</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsWritable(int Hndl, Pointer<Character > Feature, Pointer<Integer > Writable) {
		return AT_IsWritable(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Writable));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsWritable(int Hndl, @Ptr long Feature, @Ptr long Writable);
	/**
	 * Original signature : <code>int AT_IsReadOnly(AT_H, const AT_WC*, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:77</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsReadOnly(int Hndl, Pointer<Character > Feature, Pointer<Integer > ReadOnly) {
		return AT_IsReadOnly(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(ReadOnly));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsReadOnly(int Hndl, @Ptr long Feature, @Ptr long ReadOnly);
	/**
	 * Original signature : <code>int AT_SetInt(AT_H, const AT_WC*, AT_64)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:79</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetInt(int Hndl, Pointer<Character > Feature, long Value) {
		return AT_SetInt(Hndl, Pointer.getPeer(Feature), Value);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetInt(int Hndl, @Ptr long Feature, long Value);
	/**
	 * Original signature : <code>int AT_GetInt(AT_H, const AT_WC*, AT_64*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:80</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetInt(int Hndl, Pointer<Character > Feature, Pointer<Long > Value) {
		return AT_GetInt(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Value));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetInt(int Hndl, @Ptr long Feature, @Ptr long Value);
	/**
	 * Original signature : <code>int AT_GetIntMax(AT_H, const AT_WC*, AT_64*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:81</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetIntMax(int Hndl, Pointer<Character > Feature, Pointer<Long > MaxValue) {
		return AT_GetIntMax(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(MaxValue));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetIntMax(int Hndl, @Ptr long Feature, @Ptr long MaxValue);
	/**
	 * Original signature : <code>int AT_GetIntMin(AT_H, const AT_WC*, AT_64*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:82</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetIntMin(int Hndl, Pointer<Character > Feature, Pointer<Long > MinValue) {
		return AT_GetIntMin(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(MinValue));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetIntMin(int Hndl, @Ptr long Feature, @Ptr long MinValue);
	/**
	 * Original signature : <code>int AT_SetFloat(AT_H, const AT_WC*, double)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:84</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetFloat(int Hndl, Pointer<Character > Feature, double Value) {
		return AT_SetFloat(Hndl, Pointer.getPeer(Feature), Value);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetFloat(int Hndl, @Ptr long Feature, double Value);
	/**
	 * Original signature : <code>int AT_GetFloat(AT_H, const AT_WC*, double*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:85</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetFloat(int Hndl, Pointer<Character > Feature, Pointer<Double > Value) {
		return AT_GetFloat(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Value));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetFloat(int Hndl, @Ptr long Feature, @Ptr long Value);
	/**
	 * Original signature : <code>int AT_GetFloatMax(AT_H, const AT_WC*, double*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:86</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetFloatMax(int Hndl, Pointer<Character > Feature, Pointer<Double > MaxValue) {
		return AT_GetFloatMax(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(MaxValue));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetFloatMax(int Hndl, @Ptr long Feature, @Ptr long MaxValue);
	/**
	 * Original signature : <code>int AT_GetFloatMin(AT_H, const AT_WC*, double*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:87</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetFloatMin(int Hndl, Pointer<Character > Feature, Pointer<Double > MinValue) {
		return AT_GetFloatMin(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(MinValue));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetFloatMin(int Hndl, @Ptr long Feature, @Ptr long MinValue);
	/**
	 * Original signature : <code>int AT_SetBool(AT_H, const AT_WC*, AT_BOOL)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:89</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetBool(int Hndl, Pointer<Character > Feature, int Value) {
		return AT_SetBool(Hndl, Pointer.getPeer(Feature), Value);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetBool(int Hndl, @Ptr long Feature, int Value);
	/**
	 * Original signature : <code>int AT_GetBool(AT_H, const AT_WC*, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:90</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetBool(int Hndl, Pointer<Character > Feature, Pointer<Integer > Value) {
		return AT_GetBool(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Value));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetBool(int Hndl, @Ptr long Feature, @Ptr long Value);
	/**
	 * Original signature : <code>int AT_SetEnumerated(AT_H, const AT_WC*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:92</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetEnumerated(int Hndl, Pointer<Character > Feature, int Value) {
		return AT_SetEnumerated(Hndl, Pointer.getPeer(Feature), Value);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetEnumerated(int Hndl, @Ptr long Feature, int Value);
	/**
	 * Original signature : <code>int AT_SetEnumeratedString(AT_H, const AT_WC*, const AT_WC*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:93</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetEnumeratedString(int Hndl, Pointer<Character > Feature, Pointer<Character > String) {
		return AT_SetEnumeratedString(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(String));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetEnumeratedString(int Hndl, @Ptr long Feature, @Ptr long String);
	/**
	 * Original signature : <code>int AT_GetEnumerated(AT_H, const AT_WC*, int*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:94</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumerated(int Hndl, Pointer<Character > Feature, Pointer<Integer > Value) {
		return AT_GetEnumerated(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Value));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumerated(int Hndl, @Ptr long Feature, @Ptr long Value);
	/**
	 * Original signature : <code>int AT_GetEnumeratedCount(AT_H, const AT_WC*, int*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:95</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumeratedCount(int Hndl, Pointer<Character > Feature, Pointer<Integer > Count) {
		return AT_GetEnumeratedCount(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Count));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumeratedCount(int Hndl, @Ptr long Feature, @Ptr long Count);
	/**
	 * Original signature : <code>int AT_IsEnumeratedIndexAvailable(AT_H, const AT_WC*, int, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:96</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsEnumeratedIndexAvailable(int Hndl, Pointer<Character > Feature, int Index, Pointer<Integer > Available) {
		return AT_IsEnumeratedIndexAvailable(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(Available));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsEnumeratedIndexAvailable(int Hndl, @Ptr long Feature, int Index, @Ptr long Available);
	/**
	 * Original signature : <code>int AT_IsEnumeratedIndexImplemented(AT_H, const AT_WC*, int, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:97</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsEnumeratedIndexImplemented(int Hndl, Pointer<Character > Feature, int Index, Pointer<Integer > Implemented) {
		return AT_IsEnumeratedIndexImplemented(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(Implemented));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsEnumeratedIndexImplemented(int Hndl, @Ptr long Feature, int Index, @Ptr long Implemented);
	/**
	 * Original signature : <code>int AT_GetEnumeratedString(AT_H, const AT_WC*, int, AT_WC*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:98</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumeratedString(int Hndl, Pointer<Character > Feature, int Index, Pointer<Character > String, int StringLength) {
		return AT_GetEnumeratedString(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(String), StringLength);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumeratedString(int Hndl, @Ptr long Feature, int Index, @Ptr long String, int StringLength);
	/**
	 * Original signature : <code>int AT_SetEnumIndex(AT_H, const AT_WC*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:100</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetEnumIndex(int Hndl, Pointer<Character > Feature, int Value) {
		return AT_SetEnumIndex(Hndl, Pointer.getPeer(Feature), Value);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetEnumIndex(int Hndl, @Ptr long Feature, int Value);
	/**
	 * Original signature : <code>int AT_SetEnumString(AT_H, const AT_WC*, const AT_WC*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:101</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetEnumString(int Hndl, Pointer<Character > Feature, Pointer<Character > String) {
		return AT_SetEnumString(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(String));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetEnumString(int Hndl, @Ptr long Feature, @Ptr long String);
	/**
	 * Original signature : <code>int AT_GetEnumIndex(AT_H, const AT_WC*, int*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:102</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumIndex(int Hndl, Pointer<Character > Feature, Pointer<Integer > Value) {
		return AT_GetEnumIndex(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Value));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumIndex(int Hndl, @Ptr long Feature, @Ptr long Value);
	/**
	 * Original signature : <code>int AT_GetEnumCount(AT_H, const AT_WC*, int*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:103</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumCount(int Hndl, Pointer<Character > Feature, Pointer<Integer > Count) {
		return AT_GetEnumCount(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(Count));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumCount(int Hndl, @Ptr long Feature, @Ptr long Count);
	/**
	 * Original signature : <code>int AT_IsEnumIndexAvailable(AT_H, const AT_WC*, int, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:104</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsEnumIndexAvailable(int Hndl, Pointer<Character > Feature, int Index, Pointer<Integer > Available) {
		return AT_IsEnumIndexAvailable(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(Available));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsEnumIndexAvailable(int Hndl, @Ptr long Feature, int Index, @Ptr long Available);
	/**
	 * Original signature : <code>int AT_IsEnumIndexImplemented(AT_H, const AT_WC*, int, AT_BOOL*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:105</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_IsEnumIndexImplemented(int Hndl, Pointer<Character > Feature, int Index, Pointer<Integer > Implemented) {
		return AT_IsEnumIndexImplemented(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(Implemented));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_IsEnumIndexImplemented(int Hndl, @Ptr long Feature, int Index, @Ptr long Implemented);
	/**
	 * Original signature : <code>int AT_GetEnumStringByIndex(AT_H, const AT_WC*, int, AT_WC*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:106</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetEnumStringByIndex(int Hndl, Pointer<Character > Feature, int Index, Pointer<Character > String, int StringLength) {
		return AT_GetEnumStringByIndex(Hndl, Pointer.getPeer(Feature), Index, Pointer.getPeer(String), StringLength);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetEnumStringByIndex(int Hndl, @Ptr long Feature, int Index, @Ptr long String, int StringLength);
	/**
	 * Original signature : <code>int AT_Command(AT_H, const AT_WC*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:108</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_Command(int Hndl, Pointer<Character > Feature) {
		return AT_Command(Hndl, Pointer.getPeer(Feature));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_Command(int Hndl, @Ptr long Feature);
	/**
	 * Original signature : <code>int AT_SetString(AT_H, const AT_WC*, const AT_WC*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:110</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_SetString(int Hndl, Pointer<Character > Feature, Pointer<Character > String) {
		return AT_SetString(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(String));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_SetString(int Hndl, @Ptr long Feature, @Ptr long String);
	/**
	 * Original signature : <code>int AT_GetString(AT_H, const AT_WC*, AT_WC*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:111</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetString(int Hndl, Pointer<Character > Feature, Pointer<Character > String, int StringLength) {
		return AT_GetString(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(String), StringLength);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetString(int Hndl, @Ptr long Feature, @Ptr long String, int StringLength);
	/**
	 * Original signature : <code>int AT_GetStringMaxLength(AT_H, const AT_WC*, int*)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:112</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_GetStringMaxLength(int Hndl, Pointer<Character > Feature, Pointer<Integer > MaxStringLength) {
		return AT_GetStringMaxLength(Hndl, Pointer.getPeer(Feature), Pointer.getPeer(MaxStringLength));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_GetStringMaxLength(int Hndl, @Ptr long Feature, @Ptr long MaxStringLength);
	/**
	 * Original signature : <code>int AT_QueueBuffer(AT_H, AT_U8*, int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:114</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_QueueBuffer(int Hndl, Pointer<Byte > Ptr, int PtrSize) {
		return AT_QueueBuffer(Hndl, Pointer.getPeer(Ptr), PtrSize);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_QueueBuffer(int Hndl, @Ptr long Ptr, int PtrSize);
	/**
	 * Original signature : <code>int AT_WaitBuffer(AT_H, AT_U8**, int*, unsigned int)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:115</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int AT_WaitBuffer(int Hndl, Pointer<Pointer<Byte > > Ptr, Pointer<Integer > PtrSize, int Timeout) {
		return AT_WaitBuffer(Hndl, Pointer.getPeer(Ptr), Pointer.getPeer(PtrSize), Timeout);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int AT_WaitBuffer(int Hndl, @Ptr long Ptr, @Ptr long PtrSize, int Timeout);
	/**
	 * Original signature : <code>int AT_Flush(AT_H)</code><br>
	 * <i>native declaration : lib\andorsdkj\atcore.h:116</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static native int AT_Flush(int Hndl);
}
